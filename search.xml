<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL - mysql-connector连接数据库</title>
      <link href="/2020/08/19/Python%20MySQL%20-%20mysql-connector%20%E9%A9%B1%E5%8A%A8/"/>
      <url>/2020/08/19/Python%20MySQL%20-%20mysql-connector%20%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>mysql-connector</strong> 是 <strong>MySQL</strong> 官方提供的驱动器。我们可以使用 <strong>pip</strong> 命令来安装 <strong>mysql-connector</strong>：</p></blockquote><pre><code>python -m pip install mysql-connector</code></pre><a id="more"></a><p>第一种: 检测是否安装成功:</p><pre><code>import mysql.connector</code></pre><p>执行以上代码，如果没有产生错误，表明安装成功。 </p><p>第二种验证方式:查看模块 (pip list 可以查看python安装的模块)</p><pre><code>C:\Users\Administrator&gt;pip list | findstr mysqlmysql-connector                    2.2.9 </code></pre><h1 id="连接数据库查看版本"><a href="#连接数据库查看版本" class="headerlink" title="连接数据库查看版本"></a>连接数据库查看版本</h1><pre><code>import mysql.connector# 打开数据库连接db = mysql.connector.connect(  host=&quot;localhost&quot;,       # 数据库主机地址  user=&quot;root&quot;,    # 数据库用户名  passwd=&quot;123456&quot;   # 数据库密码)# 使用 cursor() 方法创建一个游标对象 cursorcursor = db.cursor()# 使用 execute()  方法执行 SQL 查询cursor.execute(&quot;SELECT VERSION()&quot;)# 使用 fetchone() 方法获取单条数据.data = cursor.fetchone()print(&quot;Database version : %s &quot; % data)# 关闭数据库连接db.close()</code></pre><p>结果:</p><p>Database version : 5.7.10-log</p><h1 id="连接到mysql指定的库"><a href="#连接到mysql指定的库" class="headerlink" title="连接到mysql指定的库"></a>连接到mysql指定的库</h1><pre><code>import mysql.connector# 打开数据库连接db = mysql.connector.connect(  host=&quot;localhost&quot;,       # 数据库主机地址  user=&quot;root&quot;,    # 数据库用户名  passwd=&quot;123456&quot;,   # 数据库密码  database=&quot;Exam9&quot;    # 链接指定的库，库不存在会报错)# 使用 cursor() 方法创建一个游标对象 cursorcursor = db.cursor()# 使用 execute()  方法执行 SQL 查询cursor.execute(&quot;SELECT VERSION()&quot;)# 使用 fetchone() 方法获取单条数据.data = cursor.fetchone()print(&quot;Database version : %s &quot; % data)# 关闭数据库连接db.close()</code></pre><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><blockquote><p>python读取数据库，并读取url、method、param去访问请求，最后将结果记录输出到html中:</p></blockquote><pre><code>#!/usr/bin/python3import pymysqlfrom urllib import requestimport urllib.parseimport chardetimport json# 访问请求的方法def requestUrl(result):    url = str(result[&#39;url&#39;]);    method = str(result[&#39;method&#39;]);    data = str(result[&#39;param&#39;]);    if url is None or method is None:        return;    if data is not None:        data = str(data);        data = data.replace(&quot;form=&quot; , &quot;&quot;); # 去掉form=        #数组参数处理        if data.startswith(&#39;[&#39;) and data.endswith(&#39;]&#39;):            datas = json.loads(data);            if len(datas) &gt; 0:                data = json.dumps(datas[0])            else :                data = &#39;{&quot;time&quot;: 1}&#39;;        elif &quot;{}&quot; == data or &quot;&quot; == data:            data = &#39;{&quot;time&quot;: 1}&#39;;    else:        data = &#39;{&quot;time&quot;: 1}&#39;;    try:        # POST请求        if &#39;POST&#39; in method:            # 将序列化后的字符串转换成二进制数据，因为post请求携带的是二进制参数            last_data = bytes(data, encoding=&#39;utf-8&#39;);            response = urllib.request.urlopen(url, data=last_data);            responseResult = response.read().decode(&#39;utf-8&#39;)            result[&#39;responseResult&#39;] = responseResult        else:            data_string=urllib.parse.urlencode(data);            new_url = url + &quot;?&quot; + data_string;            response=urllib.request.urlopen(new_url)            responseResult = response.read().decode(&#39;utf-8&#39;)            result[&#39;responseResult&#39;] = responseResult    except Exception as e:        result[&#39;responseResult&#39;] = &quot;error,原因: &quot; + str(e)# 输出爬取到的数据到本地磁盘中def out_html(datas):    if datas is None:        return;    file = open(&#39;D:\\out.html&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;)    file.write(&quot;&lt;html&gt;&quot;)    file.write(r&#39;&#39;&#39;        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;    &#39;&#39;&#39;);    file.write(&quot;&lt;head&gt;&quot;)    file.write(&quot;&lt;title&gt;爬取结果&lt;/title&gt;&quot;)    # 设置表格显示边框    file.write(r&#39;&#39;&#39;    &lt;style&gt;     table{width:100%;table-layout: fixed;word-break: break-all; word-wrap: break-word;}     table td{border:1px solid black;width:300px}    &lt;/style&gt;    &#39;&#39;&#39;)    file.write(&quot;&lt;/head&gt;&quot;)    file.write(&quot;&lt;body&gt;&quot;)    file.write(&quot;&lt;table cellpadding=&#39;0&#39; cellspacing=&#39;0&#39;&gt;&quot;)    # 遍历datas填充到表格中    for data in datas:        file.write(&quot;&lt;tr&gt;&quot;)        file.write(&quot;&lt;td&gt;%s&lt;/td&gt;&quot; % data[&#39;interfaceName&#39;])        file.write(&#39;&lt;td&gt;&lt;a href=&#39;+str(data[&#39;url&#39;])+&#39;&gt;&#39;+str(data[&#39;url&#39;])+&#39;&lt;/a&gt;&lt;/td&gt;&#39;)        file.write(&quot;&lt;td&gt;%s&lt;/td&gt;&quot; % data[&#39;method&#39;])        file.write(&quot;&lt;td&gt;%s&lt;/td&gt;&quot; % data[&#39;param&#39;])        file.write(&quot;&lt;td&gt;%s&lt;/td&gt;&quot; % data[&#39;responseResult&#39;])        file.write(&quot;&lt;/tr&gt;&quot;)    file.write(&quot;&lt;/table&gt;&quot;)    file.write(&quot;&lt;/body&gt;&quot;)    file.write(&quot;&lt;/html&gt;&quot;)#主函数用法if __name__ == &#39;__main__&#39;:        # 打开数据库连接    db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;123456&quot;, &quot;pycraw&quot;)    # 使用cursor()方法获取操作游标    cursor = db.cursor(cursor = pymysql.cursors.DictCursor)    # SQL 查询语句    sql = &quot;SELECT * FROM interface &quot;;    try:        # 执行SQL语句        cursor.execute(sql)        # 获取所有记录列表        results = cursor.fetchall()        for result in results:            requestUrl(result);        out_html(results);        print(&quot;处理完成&quot;)    except Exception as e:        print(e);    # 关闭数据库连接    db.close()</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyMySQL连接数据库操作</title>
      <link href="/2020/08/19/PyMySQL%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/08/19/PyMySQL%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="1-数据库连接"><a href="#1-数据库连接" class="headerlink" title="1.数据库连接"></a>1.数据库连接</h1><ul><li>connect() 方法声明一个MySQL连接对象db,此时需要传入MySQL运行的host（即IP）。由于MySQL在本地运行，所以传入的是localhost。如果MySQL在远程运行，则传入其公网IP地址。后续的参数user即用户名，password即密码，port即端口（默认3306）</li><li>cursor() 方法获得MySQL的操作游标，利用游标来执行SQL语句。</li><li>execute() 方法将字符串内容当做命令来执行，作用是动态创建和执行SQL语句。</li><li>fetchone() 方法获得第一条数据</li></ul><a id="more"></a><p>连接数据库插卡可能版本</p><pre><code>#!/usr/bin/python3import pymysql# 打开数据库连接db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;123456&quot;, &quot;pycraw&quot;)# 使用 cursor() 方法创建一个游标对象 cursorcursor = db.cursor()# 使用 execute()  方法执行 SQL 查询cursor.execute(&quot;SELECT VERSION()&quot;)# 使用 fetchone() 方法获取单条数据.data = cursor.fetchone()print(&quot;Database version : %s &quot; % data)# 关闭数据库连接db.close()</code></pre><h1 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2.插入数据"></a>2.插入数据</h1><pre><code>#!/usr/bin/python3import pymysql# 打开数据库连接db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;123456&quot;, &quot;pycraw&quot;)# 使用cursor()方法获取操作游标cursor = db.cursor()# SQL 插入语句sql = &quot;INSERT INTO user&quot; \      &quot;(id, name ) \       VALUES (%s, &#39;%s&#39;)&quot; % \      (3, &#39;Mac&#39;)try:    # 执行sql语句    cursor.execute(sql)    # 执行sql语句    db.commit()except:    # 发生错误时回滚    db.rollback()# 关闭数据库连接db.close()</code></pre><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>向数据库中插入一个用户信息，编号为‘1’，名字为‘林先生‘，年龄20，代码如下：</p><ul><li>commit()：需要执行db对象的commit()方法才可实现数据插入，这个方法才是真正将SQL语句提交到数据库执行的方法。对于数据的增删改查操作，都需要调用该方法才能生效。</li><li>rollback()：如果执行失败，调用rollback()方法执行数据回滚，相当于什么都没发生过。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqldb<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span>cursor<span class="token operator">=</span>db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>id<span class="token operator">=</span><span class="token string">'1'</span>name<span class="token operator">=</span><span class="token string">'林先生'</span>age<span class="token operator">=</span><span class="token number">20</span>sql<span class="token operator">=</span><span class="token string">'INSERT INTO user(id,name,age) values (%s,%s,%s)'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'插入数据成功'</span><span class="token punctuation">)</span>        db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'插入数据失败'</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>上面的数据插入的操作是通过构造SQL语句实现，但是有一个极其不方便的地方，如果突然增加了性别字段gender，此时SQL语句就需要改成：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span> gender<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token operator">%</span>s<span class="token punctuation">,</span> <span class="token operator">%</span>s<span class="token punctuation">,</span> <span class="token operator">%</span>s<span class="token punctuation">,</span> <span class="token operator">%</span>s<span class="token punctuation">)</span></code></pre><p>相应的元组参数则需要改成：(id, name, age, gender)</p><p>这显然有点麻烦，我们要达到的效果是插入数据方法无需改动，做成一个通用的方法，只需要传入一个动态变化的字典就好了。</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span>    <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'林先生'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span></code></pre><p>然后SQL语句会根据字典动态创造，元组也动态创造，实现通用的插入方法，这里我们修改一下插入方法。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqldb<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span>cursor<span class="token operator">=</span>db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'李先生'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span>table<span class="token operator">=</span><span class="token string">'user'</span>keys<span class="token operator">=</span><span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>values<span class="token operator">=</span><span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%s'</span><span class="token punctuation">]</span><span class="token operator">*</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>sql<span class="token operator">=</span><span class="token string">'INSERT INTO {table}({keys}) VALUES ({values})'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token operator">=</span>table<span class="token punctuation">,</span>keys<span class="token operator">=</span>keys<span class="token punctuation">,</span>values<span class="token operator">=</span>values<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span>tuple<span class="token punctuation">(</span>data<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'插入数据成功'</span><span class="token punctuation">)</span>        db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'插入数据失败'</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这里要传入的数据data是一个字典变量，变量table指表名，接下来构建一个动态的SQL语句。</p><p>首先，需要插入的字段是id, name, age.这里将data的键名取出，然后用逗号分隔，所以keys=’, ‘.join(data.keys())的结果就是keys=’id, name, age’ 。然后构建多个占位符%s，有几个字段构建几个占位符。values=’, ‘.join([‘%s’]*len(data))结果等于values=’%s, %s, %s’。最后利用format()方法将表名、字段名和占位符构造出来。最终的SQL语句如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token operator">%</span>s<span class="token punctuation">,</span><span class="token operator">%</span>s<span class="token punctuation">,</span><span class="token operator">%</span>s<span class="token punctuation">)</span></code></pre><ul><li>execute() 第一个参数传入SQL变量，第二个参数传入data的键值构造的元组</li></ul><h1 id="3-查询数据"><a href="#3-查询数据" class="headerlink" title="3.查询数据"></a>3.查询数据</h1><p>Python查询Mysql使用 fetchone() 方法获取单条数据, 使用fetchall() 方法获取多条数据。</p><ul><li>fetchone(): 该方法获取下一个查询结果集。结果集是一个对象。fetchone()函数它的返回值是单个的元组,也就是一行记录,如果没有结果,那就会返回null。</li><li>fetchall(): 接收全部的返回结果行。fetchall()函数,它的返回值是多个元组,即返回多个行记录,如果没有结果,返回的是()</li><li>rowcount: 这是一个只读属性，并返回执行execute()方法后影响的行数。</li></ul><h2 id="查询ID等于1的数据"><a href="#查询ID等于1的数据" class="headerlink" title="查询ID等于1的数据"></a>查询ID等于1的数据</h2><pre><code>#!/usr/bin/python3import pymysql# 打开数据库连接db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;123456&quot;, &quot;pycraw&quot;)# 使用cursor()方法获取操作游标cursor = db.cursor()# SQL 查询语句sql = &quot;SELECT * FROM user \       WHERE id = %s&quot; % (1)try:    # 执行SQL语句    cursor.execute(sql)    # 获取所有记录列表    results = cursor.fetchone()    # 打印结果    print(&quot;id=%s,name=%s&quot; % \          (results[0], results[1]))except:    print(&quot;Error: unable to fetch data&quot;)# 关闭数据库连接db.close()</code></pre><h2 id="查询ID大于1的数据"><a href="#查询ID大于1的数据" class="headerlink" title="查询ID大于1的数据"></a>查询ID大于1的数据</h2><pre><code>#!/usr/bin/python3import pymysql# 打开数据库连接db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;123456&quot;, &quot;pycraw&quot;)# 使用cursor()方法获取操作游标cursor = db.cursor()# SQL 查询语句sql = &quot;SELECT * FROM user \       WHERE id &gt; %s&quot; % (1)try:    # 执行SQL语句    cursor.execute(sql)    # 获取所有记录列表    results = cursor.fetchall()    for row in results:        id = row[0]        name = row[1]        # 打印结果        print(&quot;id=%s,name=%s&quot; % \              (id, name))    total = cursor.rowcount    print(&quot;总数: %s&quot; % \          (total))except:    print(&quot;Error: unable to fetch data&quot;)# 关闭数据库连接db.close()</code></pre><h2 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h2><pre><code>import pymysqldb=pymysql.connect(host=&#39;localhost&#39;,user=&#39;root&#39;,password=&#39;root&#39;,port=3306,db=&#39;test&#39;)cursor=db.cursor()sql=&#39;SELECT * FROM user WHERE age &gt;= 20&#39;try:    cursor.execute(sql)    print(&#39;Count:&#39;,cursor.rowcount)    one=cursor.fetchone()    print(&#39;One&#39;,one)    result=cursor.fetchall()    print(&#39;Result&#39;,result)    print(&#39;Result Type:&#39;,type(result))    for row in result:        print(row)except:    print(&#39;查收数据失败&#39;)</code></pre><p>运行结果：</p><p>Count:4</p><p>one(‘1’, ‘林先生’, 22)</p><p>Result((‘2’, ‘’, 20), (‘3’, ‘张先生’, 21), (‘4’, ‘陈先生’, 23))</p><p>Result Type:&lt;class ‘tuple’&gt;</p><p>(‘2’, ‘李先生’, 20)</p><p>(‘3’, ‘张先生’, 21)</p><p>(‘4’, ‘陈先生’, 23)</p><p>这里有一个问题：fetchall() 方法显示的是3条数据而不是4条，fetchall() 方法不是获取所有的数据吗？为什么会这样？原因是它的内部实现有一个偏移指针来指向查询结果，最开始偏移指针指向第一条数据，取一次后，指针偏移到下一条数据，这样再取的话，就会取到下一条数据了。我们最初调用了 一次fetchone() 方法，这样结果的偏移指针就指向下一条数据，fetchall() 方法返回的是偏移指针指向的数据一直到结束的所有数据，所以该方法在这里获取的结果就只剩3个。</p><p>我们还可以用while循环加fetchone()方法来获取所有数据，而不是用fetchall()全部一起获取出来。fetchall()方法会将结果以元组形式全部返回，如果数据量很大，那么占用的开销会非常高。因此，推荐如下方法来逐条取数据,每循环一次，指针偏移一条数据</p><pre><code>import pymysqldb=pymysql.connect(host=&#39;localhost&#39;,user=&#39;root&#39;,password=&#39;root&#39;,port=3306,db=&#39;test&#39;)cursor=db.cursor()sql=&#39;SELECT * FROM user WHERE age &gt;= 20&#39;try:    cursor.execute(sql)    print(&#39;Count&#39;,cursor.rowcount)    row=cursor.fetchone()    while row:        print(&#39;Row:&#39;,row)        row=cursor.fetchone()except:    print(&#39;查询数据失败&#39;)</code></pre><h1 id="4-更新数据"><a href="#4-更新数据" class="headerlink" title="4.更新数据"></a>4.更新数据</h1><pre><code>#!/usr/bin/python3import pymysql# 打开数据库连接db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;123456&quot;, &quot;pycraw&quot;)# 使用cursor()方法获取操作游标cursor = db.cursor()# SQL 查询语句sql = &quot;UPDATE user SET name = &#39;%s&#39; WHERE id = %s&quot; % (&#39;wangwu&#39;, 3)try:    # 执行SQL语句    cursor.execute(sql)    # 提交到数据库执行    db.commit()except:    # 发生错误时回滚    db.rollback()# 关闭数据库连接db.close()</code></pre><h2 id="补充-2"><a href="#补充-2" class="headerlink" title="补充"></a>补充</h2><p>数据更新操作实际上也是执行SQL语句，这里同样用占位符的方法构造SQL，然后执行execute()方法，插入元组形式的参数，同样执行commit()方法执行操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqldb<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span>cursor<span class="token operator">=</span>db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql<span class="token operator">=</span><span class="token string">'UPDATE user SET age = %s WHERE NAME = %s'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token string">'林先生'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新数据成功'</span><span class="token punctuation">)</span>        db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新数据失败'</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在实际操作中，有时可能会出现重复的数据，如果出现了，我们希望更新数据而不是重复保存一次。所以这里可以再实现一种去重的方法，如果数据存在，则更新数据；如果数据不存在，则插入数据。另外，这种做法支持灵活的字典传值。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqldb<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>db<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span>cursor<span class="token operator">=</span>db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'林先生'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">}</span>table<span class="token operator">=</span><span class="token string">'user'</span>keys<span class="token operator">=</span><span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>data<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>values<span class="token operator">=</span><span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%s'</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>sql<span class="token operator">=</span><span class="token string">'INSERT INTO {table}({keys}) VALUES ({values}) ON DUPLICATE KEY UPDATE'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token operator">=</span>table<span class="token punctuation">,</span>keys<span class="token operator">=</span>keys<span class="token punctuation">,</span>values<span class="token operator">=</span>values<span class="token punctuation">)</span>update<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">" {key} = %s"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>key<span class="token operator">=</span>key<span class="token punctuation">)</span> <span class="token keyword">for</span> key <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span>sql<span class="token operator">+=</span>update<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span>tuple<span class="token punctuation">(</span>data<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新数据成功'</span><span class="token punctuation">)</span>        db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'更新数据失败'</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这里构建的SQL语句其实是插入语句，但是在后面加了ON DUPLICATE KEY UPDATE。这行代码的意思是如果主键已经存在，就执行更新操作。比如我们传入的id依然是‘1’，但是年龄有变化,由25变成了22，此时这条数据不会被插入，而是更新id为‘1’的数据。</p><p>完整的SQL语句如下</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token operator">%</span>s<span class="token punctuation">,</span> <span class="token operator">%</span>s<span class="token punctuation">,</span> <span class="token operator">%</span>s<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DUPLICATE KEY</span> <span class="token keyword">UPDATE</span> id <span class="token operator">=</span> <span class="token operator">%</span>s<span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token operator">%</span>s<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token operator">%</span>s</code></pre><p> 这里有六个%s占位符。所以在后面的execute()方法的第二个参数就需要乘以2变成原来的2倍。这样我们就实现主键不存在便插入数据，存在则更新数据的功能了。</p><h1 id="5-删除操作"><a href="#5-删除操作" class="headerlink" title="5.删除操作"></a>5.删除操作</h1><pre><code>#!/usr/bin/python3import pymysql# 打开数据库连接db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;123456&quot;, &quot;pycraw&quot;)# 使用cursor()方法获取操作游标cursor = db.cursor()# SQL 查询语句sql = &quot;delete from  user WHERE id = %s&quot; % ( 3)try:    # 执行SQL语句    cursor.execute(sql)    # 提交到数据库执行    db.commit()except:    # 发生错误时回滚    db.rollback()# 关闭数据库连接db.close()</code></pre><h1 id="6-补充"><a href="#6-补充" class="headerlink" title="6.补充"></a>6.补充</h1><blockquote><p>PyMySQL查询数据库并映射为dict类型数据:</p></blockquote><pre><code>#!/usr/bin/python3import pymysql# 打开数据库连接db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;123456&quot;, &quot;pycraw&quot;)# 使用cursor()方法获取操作游标cursor = db.cursor(cursor = pymysql.cursors.DictCursor)# SQL 查询语句sql = &quot;SELECT * FROM user&quot;try:    # 执行SQL语句    cursor.execute(sql)    # 获取所有记录列表    results = cursor.fetchall()    for result in results:        # 打印结果        print(&quot;result: %s&quot; % (result))except:    print(&quot;Error: unable to fetch data&quot;)# 关闭数据库连接db.close()</code></pre><p>结果:</p><p>result: {‘id’: 1, ‘name’: ‘zs’, ‘userName’: ‘zhangsan’}<br>result: {‘id’: 2, ‘name’: ‘li’, ‘userName’: ‘lisi’}<br>result: {‘id’: 3, ‘name’: ‘ww’, ‘userName’: ‘wangwu’}</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
